rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for user roles and authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             getUserData().role == role && 
             getUserData().active == true;
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isManager() {
      return hasRole('manager');
    }

    function isFinance() {
      return hasRole('finance');
    }

    function isSales() {
      return hasRole('sales');
    }

    function canAccessData() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             getUserData().active == true;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();

      function isValidUser() {
        return request.resource.data.keys().hasAll(['email', 'role', 'name']) &&
          request.resource.data.email is string &&
          request.resource.data.role in ['admin', 'manager', 'finance', 'sales'] &&
          request.resource.data.name is string;
      }
    }

    // Orders Collection
    match /orders/{orderId} {
      allow read: if canAccessData();
      allow create: if canAccessData() && (isAdmin() || isManager() || isSales());
      allow update: if canAccessData() && (isAdmin() || isManager() || isSales());
      allow delete: if isAdmin();

      function isValidOrder() {
        return request.resource.data.keys().hasAll([
          'customerId', 'items', 'totalAmount', 'status', 'createdBy', 'createdAt'
        ]) &&
        request.resource.data.customerId is string &&
        request.resource.data.items is list &&
        request.resource.data.totalAmount is number &&
        request.resource.data.totalAmount > 0 &&
        request.resource.data.status in ['pending', 'processing', 'completed', 'cancelled'] &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      }
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if canAccessData();
      allow create: if canAccessData() && (isAdmin() || isManager() || isFinance());
      allow update: if canAccessData() && (isAdmin() || isManager() || isFinance());
      allow delete: if isAdmin();

      function isValidPayment() {
        return request.resource.data.keys().hasAll([
          'orderId', 'amount', 'method', 'createdBy', 'createdAt', 'soldBy'
        ]) &&
        request.resource.data.orderId is string &&
        request.resource.data.amount is number &&
        request.resource.data.amount > 0 &&
        request.resource.data.method in ['cash', 'bank_transfer', 'ecocash', 'innbucks'] &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.soldBy is string;
      }
    }

    // Expenses Collection
    match /expenses/{expenseId} {
      allow read: if canAccessData() && (isAdmin() || isManager() || isFinance());
      allow create: if canAccessData() && (isAdmin() || isManager() || isFinance());
      allow update: if canAccessData() && (isAdmin() || isManager() || isFinance());
      allow delete: if isAdmin();

      function isValidExpense() {
        return request.resource.data.keys().hasAll([
          'date', 'category', 'amount', 'description', 'paymentMethod', 'createdBy'
        ]) &&
        request.resource.data.date is timestamp &&
        request.resource.data.category in [
          'office_supplies', 'utilities', 'rent', 'salaries', 'marketing', 
          'travel', 'software', 'hardware', 'consulting', 'legal', 'banking',
          'food', 'director_withdrawal', 'transport', 'salary_advance', 'other'
        ] &&
        request.resource.data.amount is number &&
        request.resource.data.amount > 0 &&
        request.resource.data.description is string &&
        request.resource.data.paymentMethod in ['bank_transfer', 'cash', 'ecocash', 'innbucks'] &&
        request.resource.data.createdBy == request.auth.uid;
      }
    }

    // Customers Collection
    match /customers/{customerId} {
      allow read: if canAccessData();
      allow create: if canAccessData() && (isAdmin() || isManager() || isSales());
      allow update: if canAccessData() && (isAdmin() || isManager() || isSales());
      allow delete: if isAdmin();

      function isValidCustomer() {
        return request.resource.data.keys().hasAll([
          'name', 'email', 'phone', 'createdBy', 'createdAt'
        ]) &&
        request.resource.data.name is string &&
        request.resource.data.email is string &&
        request.resource.data.phone is string &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt is timestamp;
      }
    }

    // Leads Collection
    match /leads/{leadId} {
      allow read, write: if request.auth != null;
    }
  }
}